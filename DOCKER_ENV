This is where docker write credentials details - 
cat ~/.docker/config.json

To see all connected registries - 
docker-credential-desktop list | jq '.'
docker info | grep Username

jq is json beautifier and after pipe it means, take all json file and format it.
To check which account are saved.
If you're not sure which Docker account you're logged into, this command confirms it.

--------------------------------------------------
DOCKER_FILES - 

ENV var - Environment Variables (ENV vars) in Docker are like configuration settings that you set with default values in your Dockerfile, but can change when running the container. They make your Docker images flexible and reusable across different environments.
I need to define this a the start of the dockerfile, so i can change them if needed for like dev, test etc and rest file remain same.
dockerfile
# Default production settings
ENV PORT=80
ENV DB_URL=mongodb://prod
ENV LOG_LEVEL=error

# Production - uses defaults
docker run myapp

# Testing - override defaults
docker run -e PORT=4000 \
          -e DB_URL=mongodb://test \
          -e LOG_LEVEL=debug \
          myapp

# Development - different overrides
docker run -e PORT=3000 \
          -e DB_URL=mongodb://localhost \
          -e LOG_LEVEL=debug \
          myapp


2. Configuration Flexibility
No need for multiple configurations:
# Instead of different files for each environment:
# Dockerfile.dev
# Dockerfile.test
# Dockerfile.prod

# One Dockerfile with defaults
ENV PORT=80
ENV DB_URL=mongodb://default
ENV LOG_LEVEL=error

# Change at runtime as needed
docker run -e PORT=3000 -e DB_URL=mongodb://new-db myapp

3. Common Use Cases with Examples
# Port configuration
ENV PORT=80                        # Which port to listen on

# Database configuration
ENV DB_URL=mongodb://db           # Database connection string
ENV DB_NAME=myapp                 # Database name

# API configuration
ENV API_URL=http://api.com        # External API endpoint
ENV API_VERSION=v1                # API version

# Application behavior
ENV LOG_LEVEL=error              # Logging configuration
ENV DEBUG=false                  # Debug mode flag

# Feature flags
ENV FEATURE_NEW_UI=false         # Toggle new features

# Service connections
ENV REDIS_HOST=redis.server      # Cache service
ENV ELASTIC_URL=http://elastic   # Search service

......................................
USING SENSITIVE INFO - 

# Dockerfile
- for sensitive info i will leave these 2 in dockerfile like this - 
  ENV DB_PASSWORD=""
  ENV API_KEY=""

docker build -t myapp .   (to build image but without sensitive info)

- then i will create passowrd.env file 
  DB_PASSWORD=secret123
  API_KEY=abc123

docker run --env-file path/to/password.env myapp (this way i am injecting sensitive values now.) start container first time.
.....................................

LOG-LEVEL - 
ENV LOG_LEVEL=error   # Most restrictive by default (in docker file)

# To see more details 
docker run -e LOG_LEVEL=debug myapp (this set env var temp)

# To see only important info
docker run -e LOG_LEVEL=info myapp

# To see minimal logs (errors only)
docker run -e LOG_LEVEL=error myapp > myapp.log

